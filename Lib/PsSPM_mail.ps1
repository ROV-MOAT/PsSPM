<#
.SYNOPSIS
    PsSPM(ROV-MOAT) - PowerShell SNMP Printer Monitoring and Reporting Script

.DESCRIPTION
    Mail function

    Usage:
        Send-UniversalMail -MailFrom "example@example.com" -MailTo "example@example.com" `
                -Body $MailHtmlBody `
                -IsBodyHtml $true `
                -Username "your-username" `
                -Password "your_password" `
                -SmtpServer "smtp.office365.com" `
                -SmtpPort 587 `
                -EnableSsl $true `
                -SslProtocol "Tls12"

        Send-UniversalMail -MailFrom "example@example.com" -MailTo "example@example.com" `
                -UseDefaultCredentials `
                -SmtpServer "smtp.gmail.com" `
                -SmtpPort 465 `
                -EnableSsl $true `
                -SslProtocol "Tls13"

        Send-UniversalMail -MailFrom "example@example.com" -MailTo "example@example.com" `
                -UseDefaultCredentials `
                -SmtpServer "smtp.example.com" `
                -SmtpPort 25 `
                -EnableSsl $false
#>

function Send-UniversalMail {
    param(
        [Parameter(Mandatory=$true)]
        [string]$MailFrom,
        [Parameter(Mandatory=$true)]
        [string[]]$MailTo,
        [string]$Subject = "PsSPM Report",
        [string]$Body = "This message was automatically generated by PowerShell SNMP printer monitoring.",
        [bool]$IsBodyHtml = $false,
        [string[]]$Attachments,
        [string[]]$CC,
        [string[]]$BCC,
        [string]$SmtpServer = "smtp.example.com",
        [int]$SmtpPort = 25,
        [bool]$EnableSsl = $false,

        # Authentication parameters
        [switch]$UseDefaultCredentials,
        [string]$Username = "",
        [string]$Password = "",
        [string]$Domain = "",
        
        # Additional settings
        [int]$SmtpTimeoutMs = 30000,
        
        [ValidateSet("None", "Tls", "Tls11", "Tls12", "Tls13")]
        [string]$SslProtocol = "None"
    )

    $mail = $null
    $smtpClient = $null
    $attachmentsList = @()

    try {
        Write-Log "Trying to send a letter via $SmtpServer`:$SmtpPort..."
        
        # Checking authentication parameters
        if (-not $UseDefaultCredentials -and (-not $Username -or -not $Password)) {
            throw "You must specify either UseDefaultCredentials or Username and Password"
        }

        # Create a letter object
        $mail = [System.Net.Mail.MailMessage]::new()
        $mail.From = $MailFrom
        
        # Adding recipients
        foreach ($recipient in $MailTo) { $mail.To.Add($recipient) }
        
        # Adding copies
        if ($CC) { foreach ($ccRecipient in $CC) { $mail.CC.Add($ccRecipient) } }
        
        # Adding hidden copies
        if ($BCC) { foreach ($bccRecipient in $BCC) { $mail.Bcc.Add($bccRecipient) } }
        
        $mail.Subject = $Subject
        $mail.Body = $Body
        $mail.IsBodyHtml = $IsBodyHtml

        # Adding attachments
        if ($Attachments) {
            foreach ($attachmentPath in $Attachments) {
                if ($null -eq $attachmentPath -or $attachmentPath -like "") { continue }
                
                if (Test-Path $attachmentPath -PathType Leaf) {
                    $attachment = [System.Net.Mail.Attachment]::new($attachmentPath)
                    $mail.Attachments.Add($attachment)
                    $attachmentsList += $attachment
                    Write-Log "Attachment added: $attachmentPath"
                } else {
                    Write-Log "File not found: $attachmentPath" -Level "WARNING"
                }
            }
        }

        # Setting up an SMTP client
        $smtpClient = [System.Net.Mail.SmtpClient]::new($SmtpServer, $SmtpPort)
        $smtpClient.EnableSsl = $EnableSsl
        $smtpClient.Timeout = $SmtpTimeoutMs

        # Setting up SSL protocol (if specified)
        if ($SslProtocol -ne "None" -and $EnableSsl) {
            try {
                # SSL protocol setup
                $sslProtocolValue = [System.Net.Security.SslProtocols]::$SslProtocol
                $smtpClient.EnableSsl = $true
                
                # In .NET Framework 4.5+ you can set a specific protocol
                if ($smtpClient.GetType().GetProperty("SslProtocols")) {
                    $smtpClient.SslProtocols = $sslProtocolValue
                }
                
                Write-Log "SSL protocol is used: $SslProtocol"
            }
            catch {
                Write-Log "Failed to establish SSL protocol: $SslProtocol. Error: $($_.Exception.Message)" -Level "WARNING"
            }
        }

        # Setting up authentication
        if ($UseDefaultCredentials) {
            $smtpClient.UseDefaultCredentials = $true
            Write-Log "Default credentials are used"
        } else {
            $smtpClient.UseDefaultCredentials = $false
            
            # Create credentials
            $securePassword = ConvertTo-SecureString $Password -AsPlainText -Force
            if ($Domain) {
                $credential = New-Object System.Net.NetworkCredential($Username, $securePassword, $Domain)
                Write-Log "Authentication with domain: $Domain"
            } else {
                $credential = New-Object System.Net.NetworkCredential($Username, $securePassword)
            }
            
            $smtpClient.Credentials = $credential
            Write-Log "Authentication by login/password: $Username"
        }

        # Sending a letter
        Write-Log "Sending a letter..."
        $smtpClient.Send($mail)
        
        Write-Log "The letter has been sent successfully!" -ForegroundColor Green
        Write-Log "From: $MailFrom" -ForegroundColor Gray
        Write-Log "To: $($MailTo -join ', ')" -ForegroundColor Gray
        Write-Log "Subject: $Subject" -ForegroundColor Gray
        Write-Log "Server: $SmtpServer`:$SmtpPort" -ForegroundColor Gray
        if ($SslProtocol -ne "None") {
            Write-Log "SSL protocol: $SslProtocol"
        }
        
        return $true
    }
    catch {
        Write-Log "Error sending email: $($_.Exception.Message)" -Level "ERROR"
        if ($_.Exception.InnerException) {
            Write-Log "Internal error: $($_.Exception.InnerException.Message)" -Level "ERROR"
        }
        return $false
    }
    finally {
        # Resource release
        if ($attachmentsList) {
            foreach ($attachment in $attachmentsList) {
                $attachment.Dispose()
            }
        }
        if ($mail) { 
            $mail.Dispose() 
            Write-Log "Letter resources freed"
        }
        if ($smtpClient) { 
            $smtpClient.Dispose() 
            Write-Log "SMTP client resources have been released"
        }
    }
}